const Chariot = require('chariot.js');
const colour = require('../../Util/colorconfig.json')
const {GuildConfig, Birthdays} = require("./DataManager");
const Scheduler = require("./Scheduler")

class commandname extends Chariot.Command {
    constructor() {
        super();

        this.name = 'cset';
        this.cooldown = 5;
        this.allowDMs = false;
        this.userPermissions = ['administrator']
        this.help = {
            message: 'Sets a variety of config options',
            usage: 'set coption choice',
            example: ['cset bday_role birthdays'],
            inline: true
        }
    }

  
    async execute(message, args, chariot) {
// Command Goes here!
let input = args.join(' ')
const guild_id = message.guild.id;
	let [, key, value] = input.match(/^([^\s]+)(?:\s+(.*))?/);
	switch (key) {
		case "admin_roles":
			value = value.split(" ").map(value => value.replace(/^<@&(\d+)>$/, "$1")).join(",");
			// TODO check if roles exist
			break;
		case "bday_role":
			value = value.replace(/^<@&(\d+)>$/, "$1");
			// TODO check if role exists
			break;
		case "command_channels":
			value = value.split(" ").map(value => value.replace(/^<#(\d+)>$/, "$1")).join(",");
			// TODO check if channels exist
			break;
		case "alert_channel":
			value = value.replace(/^<#(\d+)>$/, "$1");
			// TODO check if channel exists
			break;
		case "alert_time":
			const [match, hour, minute] = value.match(/^(\d{2}):(\d{2})$/);
			if (!match || hour > 23 || minute > 59) return;
			break;
		case "timezone":
			if (!value.match(/^[a-z_]+\/[a-z_]+$/i)) return;
			// TODO check if time zone exists
			break;
		case "alert_embed":
			if (!value.match(/^(?:true|false)$/)) return;
			break;
		case "alert_message":
		case "alert_message_age":
		case "alert_embed":
			break;
		default:
			return;
	}
	const changes = GuildConfig.set(guild_id, key, value);
	if (changes) {
		switch (key) {
			case "alert_time":
				Scheduler.schedulers[guild_id].setTime(value);
				break;
			case "timezone":
				Scheduler.schedulers[guild_id].setTimezone(value);
				checkBdayRole(message.guild.id);
				break;
			case "bday_role":
				checkBdayRole(message.guild.id);
				break;
		}
		message.channel.send(`:white_check_mark: \`${key}\` has been set.`);
	}
}

    }


module.exports = new commandname();